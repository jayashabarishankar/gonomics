name: Go

on:
  push:
    branches: main
  pull_request:
    branches: main

env:
  GOLANG: 1.18

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GOLANG }}
      - name: go fmt
        run: go fmt ./...
      - name: go fmt simplify
        run: gofmt -s -w ./*/*.go
      - name: go fmt simplify 2-deep
        run: gofmt -s -w ./*/*/*.go
      - name: go fmt simplify cmd
        run: gofmt -s -w ./cmd/*/*.go
      - name: Check for modified files
        id: git-check
        run: echo "{modified}={$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)}" >> $GITHUB_OUTPUT
      - name: Push changes
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.email "AutoFmtBot@fmtyacodeffs.com"
          git config --global user.name "AutoFmt Bot"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git commit -am "fix: automated go fmt ./..."
          git push

  gitactions:
    needs: format
    strategy:
      matrix:
        OS: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.OS }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GOLANG }}
      - name: go root
        run: echo $GOROOT && echo $GOPATH
      - name: Download and verify all gonomics dependencies and modules
        run: go mod download && go mod verify
      - name: Building binaries executables
        run: go build ./...
      - name: Installing binaries into GOBIN
        run: go install ./...
      - name: Test
        run: go test ./...
      - name: Coverage
        run: go test -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          files: coverage.txt
          verbose: true
