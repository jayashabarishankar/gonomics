In this file, I'll explain how the test files used to evaluate samAssembler were generated.

First, we'll need a reference genome sequence. In this case, I generated a 10kb random sequence with randSeq.

~/go/bin/randSeq -numSeq 1 -lenSeq 10000 -setSeed 23 ref.fa

Next, I generated two evolved sequences with branch length 0.01 with simulateEvol.

~/go/bin/simulateEvol -branchLength 0.05 -propIndel 0.1 -setSeed 19 -transitionBias 3 ref.fa evol1.fa
~/go/bin/simulateEvol -branchLength 0.05 -propIndel 0.1 -setSeed 17 -transitionBias 3 ref.fa evol2.fa

I then filtered out the evolved sequences from the resulting multiFa alignments and trimmmed out gaps:

~/go/bin/faFilter -notName Sequence_0 evol1.fa tmp.evol1.fa
~/go/bin/faFilter -notName Sequence_0 evol2.fa tmp.evol2.fa
~/go/bin/faFormat -noGaps tmp.evol1.fa evol1.diverge.noGaps.fa
~/go/bin/faFormat -noGaps tmp.evol2.fa evol2.diverge.noGaps.fa

Next I generated 30x coverage short reads. (# of reads =  1000 = 30xCoverage * 10kb Genome Length / 300bp read length
~/go/bin/simulateSam -n 1000 -setSeed 9 -readLength 150 -fragmentLength 400 evol1.diverge.noGaps.fa evol1.Reads.bam
~/go/bin/simulateSam -n 1000 -setSeed 9 -readLength 150 -fragmentLength 400 evol2.diverge.noGaps.fa evol2.Reads.bam

Next I recovered fastq reads from the simulated bam files and merged the fastq files together
~/Software/bedtools2/bin/bedtools bamtofastq -i evol1.Reads.bam -fq evol1.readA.fastq -fq2 evol1.readB.fastq
~/Software/bedtools2/bin/bedtools bamtofastq -i evol2.Reads.bam -fq evol2.readA.fastq -fq2 evol2.readB.fastq

cat evol1.readA.fastq evol2.readA.fastq > merged.readA.fastq
cat evol1.readB.fastq evol2.readB.fastq > merged.readB.fastq

After this, I aligned these reads to the reference genome and sorted the reads

~/Software/bwa-0.7.17/bwa index ref.fa
~/Software/bwa-0.7.17/bwa mem -t 8 ref.fa merged.readA.fastq merged.readB.fastq | ~/Software/samtools-1.9/samtools view -bh - > diverged.RefAln.bam
~/Software/samtools-1.9/samtools sort diverged.RefAln.bam -o diverged.RefAln.sorted.bam

Finally, we remove the intermediate files
rm diverged.RefAln.bam evol1.Reads.bam evol1.diverge.noGaps.fa evol1.fa evol1.readA.fastq evol1.readB.fastq evol2.Reads.bam evol2.diverge.noGaps.fa evol2.fa
rm  evol2.readA.fastq evol2.readB.fastq merged.readA.fastq merged.readB.fastq ref.fa.amb ref.fa.ann ref.fa.bwt ref.fa.pac ref.fa.sa tmp.evol1.fa tmp.evol2.fa

We now have diploid testing data generated from a synthetic sequence to be used with samAssembler

